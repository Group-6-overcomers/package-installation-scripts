# This script will help set up Kubernetes using Kubeadm In AWS EC2 Ubuntu Servers
#You will need a minimum of 3 servers (1 manager and 2 workers)
#The manager will require t2.medium, while the workers will require a minimum of 2GB RAM
#You will need to open certain required ports. For our exercise, we will open "all trafic".

#Update the apt package index and install packages needed to use the Kubernetes apt repository
sudo apt-get update -y
sudo apt-get install -y ca-certificates curl

#Download the Google Cloud public signing key
sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

#Add the Kubernetes apt repository
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

#Turn off Swap Space
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

#Install kubeadm, kubelet and kubectl
sudo apt-get update -y
sudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni
sudo apt-mark hold kubelet kubeadm kubectl

# Enable and start kubelet service
sudo systemctl daemon-reload
sudo systemctl start kubelet
sudo systemctl enable kubelet.service

#Install Container Runtime
echo "Installing the required packages..."
sudo apt install apt-transport-https ca-certificates curl software-properties-common

echo "Exporting the environmental variables..."
DOCKER_EE_URL="https://repos.mirantis.com"
DOCKER_EE_VERSION=20.10

echo "Adding the GPG keys for the repository..."
curl -fsSL "${DOCKER_EE_URL}/ubuntu/gpg" | sudo apt-key add -

echo "Adding the stable repository to the system..."
sudo add-apt-repository "deb [arch=$(dpkg --print-architecture)] $DOCKER_EE_URL/ubuntu focal stable"

echo "Installing Mirantis Container Runtime(MCR)"
sudo apt update
sudo apt install docker-ee docker-ee-cli containerd.io

echo "Starting the docker daemon..."
sudo systemctl enable --now docker

echo "Adding your user to the Docker group..." 
sudo usermod -aG docker $USER
newgrp docker

echo "Enabling the cri-docker plugin..."
sudo systemctl enable --now cri-docker.service

echo "Proceed to pulling container images..."
sudo kubeadm config images pull --cri-socket /run/cri-docker.sock

#You may check the status of your cri-docker service bu running the command below to identify the default socket as "/run/cri-docker.sock"
#systemctl status cri-docker.socket


<<TheseWillApplyOnlyToTheManagerNode
# Initialize Kubernetes manager in the manager node
sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --cri-socket /run/cri-docker.sock

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# To verify whether kubectl is working or not, run the following command:
kubectl get pods -o wide --all-namespaces

#From the foregoing, all but 1 pod should be running: ‘kube-dns’. To resolve this, install a weave pod network.
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

kubectl get nodes
kubectl get pods --all-namespaces

# Get token
kubeadm token create --print-join-command

TheseWillApplyOnlyToTheManagerNode


### Note for Next Steps
#1. To add worker nodes to the manager node, copy the kubeadm join token from the manager node and execute in all the worker nodes to create a cluster
#2. kubectl commands have to be executed in manager node/controller plane.
#3. To check nodes, run "kubectl get nodes"
#4. To deploy a sample application. run "kubectl run nginx-demo --image=nginx --port=80"
#5. To create a Service object that exposes the pod, run "kubectl expose pod nginx-demo --port=80 --type=NodePort"
#6. To list all services in the namespace or to get Node Port details, run "kubectl get services"
